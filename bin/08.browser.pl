#!/usr/bin/perl

# Note: this is for SEAN THOMAS's *binned* browser tracks that are primarily intended for ChIP-seq!
# The more non-binned wiggle/bam tracks are generated by "48.browser_agw.pl"

use strict; use warnings; use Carp; # Carp = "confess" function
use File::Spec::Functions qw(catfile);   use Data::Dumper;   use File::Basename;
use lib "/wynton/group/gladstone/biocore/MonkeyPipeline"; use bananas_agw; # To make sure we find bananas_agw

# bigWig is really 'bedGraphToBigWig'
# bigBed is really bedToBigBed

bananas_agw::requireEnvOrDie('force','genome','seqType','bigWig','bigBed','peaksDir','gemPeaksDir','bcpPeaksDir','atacSeqDir','densityDir','browserDir','studyName','sampleName','inputName','chromSizes','genomicBins','url'); # <-- these vars MUST be defined in the %ENV hash
# check for correct qsub variables needed to perform density calculations

my ($force, $verbose) = bananas_agw::envLooksTrue("force", "verbose");
my $aDir              = $ENV{'browserDir'};
my $k                 = $ENV{'sampleName'};
my $genome            = $ENV{'genome'};
my $type              = $ENV{'seqType'};
my $trackSuff         = $ENV{'trackFileSuffix'};

my $bedGraphToBigWig  = $ENV{'bigWig'};
my $bedToBigBed       = $ENV{'bigBed'};

my $finalTrackDescriptionFile  = catfile($ENV{'browserDir'},"$ENV{'sampleName'}${trackSuff}"); # output tracks file that will be generated
my $black  = "0,0,0";

# make sure write directories exists or make them
bananas_agw::mkdirOrDie($aDir);

sub needToGenerate($) { # Question: "do we need to generate this file?"
	my ($filename) = @_; # The file in question: does it already exist?
	if ($force) { return 1; } # always re-generat if FORCE is in effect
	if (not -e $filename) { return 1; }
	return 0; # otherwise, I guess we don't need to make it
}

sub createBigWigLine { # Creates a bigWig line for the UCSC genome browser
	my ($label,$study,$file,$url,$viewMin,$viewMax) = @_;
	my $base  = basename($file);
	my $track = qq(track type=bigWig name="${label}" maxHeightPixels=120:20:10 color="${black}" visibility=full autoScale=off windowingFunction=maximum viewLimits=$viewMin:$viewMax description="${label}" bigDataUrl="${url}/${study}/${base}");
	return($track);
}

sub createExoBigWigLine { # Creates a bigWig line for the UCSC genome browser
	my ($label,$label2,$study,$file,$url) = @_;
	my $base  = basename($file);
	my $track = qq(track type=bigWig name="${label}_${label2}" maxHeightPixels=120:20:10 color="${black}" visibility=full autoScale=off windowingFunction=maximum viewLimits=2:8 description="${label}_${label2}" bigDataUrl="${url}/${study}/${base}");
	return($track);
}

sub createPeakBigBedLine {  # Creates a bigBed line for the UCSC genome browser
	my ($method,$label,$study,$file,$url) = @_;
	my $base = basename($file);
	my $track = qq(track type=bigBed name="${label}_${method}Peaks" visibility=dense color="${black}" description="${label}_${method}Peaks" bigDataUrl="${url}/${study}/${base}");
	return($track);
}

sub createFootprintBigBedLine {  # Creates a bigBed line for the UCSC genome browser
	my ($label,$study,$file,$url) = @_;
	my $base = basename($file);
	my $track = qq(track type=bigBed name="${label}_footprints_v1" visibility=dense color="${black}" description="${label}_footprints_v1" bigDataUrl="${url}/${study}/${base}");
	return($track);
}

sub ourWriteToFile($$) {
	my ($file, $textToWrite) = @_;
	($file =~ '^>')       or confess "$file must have '>' or '>>' prefixed\n";
	open(OUTFILE,"$file") or confess "Failed to write to this file: $file\n";
	print OUTFILE $textToWrite; # jsut write this one line...
	close(OUTFILE);
}

sub appendToBrowserFile($) {
	my ($textToWrite) = @_;
	chomp($textToWrite); # remove a trailing newline IF present (we will add one below no matter what)
	return(ourWriteToFile(">>".${finalTrackDescriptionFile}, $textToWrite . "\n"));  # <-- finalTrackDescriptionFile is a GLOBAL single file we always write to
}

#my $NO_OUT = ' > /dev/null 2>&1';

my $SHOULD_RUN_GEM              = ($type =~ m/^(chip|exo)$/i);
my $SHOULD_RUN_BCP              = (($type =~ m/^(chip)$/i) && ("NA" ne uc($ENV{'inputName'})));
my $SHOULD_GENERATE_BB_FILE     = ($type =~ m/^(chip|exo|atac|other)$/i); # bigBed file
my $SHOULD_GENERATE_BIGWIG_FILE = 1; # actually make this for literally all types -- rna, chip, exo, atac, and other

ourWriteToFile(">$finalTrackDescriptionFile",""); # CLEAR OUT the file entirely---start with an empty file!

my $chromSizes = $ENV{'chromSizes'};
bananas_agw::dieIfFileAccessFails($chromSizes);

if ($SHOULD_GENERATE_BIGWIG_FILE) {
	my $outWig = catfile($aDir, "${k}_${genome}_tagDensity.bw");
	if (needToGenerate($outWig)) {
		bananas_agw::dieIfFileAccessFails($ENV{'genomicBins'});
		my $fn  = bananas_agw::catRequiredFile($ENV{'densityDir'}, "counts", "${k}_${genome}_tagDensity.bed.count");
		my $TMP = $outWig . "_temp.bedgraph";
		bananas_agw::systemAndLog("paste $ENV{'genomicBins'} $fn > $TMP", $verbose);
		bananas_agw::systemAndLog("$bedGraphToBigWig $TMP $chromSizes $outWig     > /dev/null 2>&1", $verbose);
		unlink($TMP);
	}
	bananas_agw::dieIfFileAccessFails($outWig);
	appendToBrowserFile(createBigWigLine($k, $ENV{'studyName'}, $outWig, $ENV{'url'}, 5, 200));
}

if ($SHOULD_GENERATE_BB_FILE) {
	my $bbOut = catfile($aDir, "${k}_${genome}_peaks.bb");
	if (needToGenerate($bbOut)) {
		my $bbfn = bananas_agw::catRequiredFile($ENV{'peaksDir'}, "${k}_${genome}_peaks.bed");
		my $TMP  = $bbfn . "_tmPeaks.bed.tmp";
		bananas_agw::systemAndLog("cut -f 1-4 $bbfn > $TMP", $verbose);
		bananas_agw::systemAndLog("$bedToBigBed $TMP $chromSizes $bbOut     > /dev/null 2>&1", $verbose);
		unlink($TMP);
	}
	bananas_agw::dieIfFileAccessFails($bbOut);
	appendToBrowserFile(createPeakBigBedLine("tm", $k, $ENV{'studyName'}, $bbOut, $ENV{'url'}));
}

if ($type eq "exo") {
	# get 1bp resolution bigWigs
	# get begraph from density files
	my $pstfBW = catfile($aDir, "${k}_${genome}_posTagDensity10bp_inPeaks_1bpRes.bw");
	my $nstfBW = catfile($aDir, "${k}_${genome}_negTagDensity10bp_inPeaks_1bpRes.bw");
	if (needToGenerate($pstfBW) or needToGenerate($nstfBW)) {
		my $pstf   = bananas_agw::catRequiredFile($ENV{'peaksDir'}, "${k}_${genome}_posTagDensity10bp_inPeaks_1bpRes.bed"); # <-- this must ALREADY EXIST
		my $nstf   = bananas_agw::catRequiredFile($ENV{'peaksDir'}, "${k}_${genome}_negTagDensity10bp_inPeaks_1bpRes.bed");
		my $pstfBG = "${pstf}_temp_pos.bedGraph";
		my $nstfBG = "${nstf}_temp_neg.bedGraph";
		bananas_agw::systemAndLogDieNonzero("cut -f 1-3,5 $pstf > $pstfBG", $verbose);
		bananas_agw::systemAndLogDieNonzero("cut -f 1-3,5 $nstf > $nstfBG", $verbose);
		# convert to bigwig
		bananas_agw::systemAndLog("$bedGraphToBigWig $pstfBG $chromSizes $pstfBW     > /dev/null 2>&1", $verbose);
		bananas_agw::systemAndLog("$bedGraphToBigWig $nstfBG $chromSizes $nstfBW     > /dev/null 2>&1", $verbose);
		# get rid of bedgraph
		unlink($pstfBG); unlink($nstfBG);
	}
	bananas_agw::dieIfFileAccessFails($pstfBW);
	bananas_agw::dieIfFileAccessFails($nstfBW);

	appendToBrowserFile(createExoBigWigLine($k, "pos", $ENV{'studyName'}, $pstfBW, $ENV{'url'}));
	appendToBrowserFile(createExoBigWigLine($k, "neg", $ENV{'studyName'}, $nstfBW, $ENV{'url'}));
	# get footprint bigbed
	my $fpbbOut = catfile($aDir, "${k}_${genome}_footprint.bb");
	if (needToGenerate($fpbbOut)) {
		my $fpfile = bananas_agw::catRequiredFile($ENV{'peaksDir'}, "${k}_${genome}_footprints.bed");
		my $TMP    = $fpfile . ".tmp";
		bananas_agw::systemAndLogDieNonzero("cut -f 1-4 $fpfile > $TMP", $verbose);
		bananas_agw::systemAndLog("$bedToBigBed $TMP $chromSizes $fpbbOut     > /dev/null 2>&1", $verbose);
		unlink($TMP);
	}
	bananas_agw::dieIfFileAccessFails($fpbbOut);
	appendToBrowserFile(createFootprintBigBedLine($k, $ENV{'studyName'}, $fpbbOut, $ENV{'url'}) );
}

# add GEM peak output if necessary
if ($SHOULD_RUN_GEM) {
	my $gpbb      = catfile($aDir, "${k}_${genome}_gemPeaks.bb");
        my $gpfile = bananas_agw::catRequiredFile($ENV{'gemPeaksDir'}, "${k}_${genome}_gemPeaks.bed");
        if(-e $gpfile) {
        my $back=`wc -l $gpfile`;
        my @array1=split ' ', $back;
        my $nl=$array1[0];
	if (needToGenerate($gpbb) && $nl > 0) {
		# my $gpfile = bananas_agw::catRequiredFile($ENV{'gemPeaksDir'}, "${k}_${genome}_gemPeaks.bed");
		my $TMP    = $gpfile . ".tmp";
		bananas_agw::systemAndLogDieNonzero("cut -f 1-4 $gpfile > $TMP", $verbose);
		bananas_agw::systemAndLog("$bedToBigBed $TMP $chromSizes $gpbb     > /dev/null 2>&1", $verbose);
		unlink($TMP);
	
	        bananas_agw::dieIfFileAccessFails($gpbb);
	        appendToBrowserFile(createPeakBigBedLine("gem", $k, $ENV{'studyName'}, $gpbb, $ENV{'url'}) );
        }
        }
}

# add BCP peak output if necessary
if ($SHOULD_RUN_BCP) {
	my $bpbb = catfile($aDir, "${k}_${genome}_bcpPeaks.bb");
	if (needToGenerate($bpbb)) {
		my $bpfile = bananas_agw::catRequiredFile($ENV{'bcpPeaksDir'}, "${k}_${genome}_bcpPeaks.bed");
		my $TMP    = "${bpfile}.tmp";
		bananas_agw::systemAndLogDieNonzero("cut -f 1-4 $bpfile > $TMP", $verbose);
		bananas_agw::systemAndLog("$bedToBigBed $TMP $chromSizes $bpbb     > /dev/null 2>&1", $verbose);
		unlink($TMP);
	}
	bananas_agw::dieIfFileAccessFails($bpbb); # <-- maybe BCP will return no file if it can't find any peaks?? Unclear.
	appendToBrowserFile(createPeakBigBedLine("bcp", $k, $ENV{'studyName'}, $bpbb, $ENV{'url'}) );
}

# add ATACseq nucleosome output if necessary
#if ($type eq "atac") {
# this section of code commented out for evaluation
#my $nucDensFile  = catfile($ENV{'atacSeqDir'}, "${k}_${genome}_nucOcc.bedGraph.gz");
#my $nucPeaksFile = catfile($ENV{'atacSeqDir'}, "${k}_${genome}_nucOccPeaks.bed.gz");
#my $tmpDens      = catfile($ENV{'atacSeqDir'}, "${k}_${genome}_nucOcc.bedGraph");
#my $tmpPeaks     = catfile($ENV{'atacSeqDir'}, "${k}_${genome}_nucOccPeaks.bed");
#my $densOut      = catfile($aDir, "${k}_${genome}_nucOcc.bw");
#my $peaksOut     = catfile($aDir, "${k}_${genome}_nucOccPeaks.bb");

#if ($force || ! -e $densOut || ! -e $peaksOut) {
#bananas_agw::systemAndLog("zcat $nucDensFile > $tmpDens", $verbose);
#bananas_agw::systemAndLog("zcat $nucPeaksFile > $tmpPeaks", $verbose);
#bananas_agw::systemAndLog("$bedGraphToBigWig $tmpDens  $chromSizes $densOut      > /dev/null 2>&1", $verbose);
#bananas_agw::systemAndLog("$bedToBigBed $tmpPeaks $chromSizes $peaksOut     > /dev/null 2>&1", $verbose);
# bananas_agw::systemAndLog("/bin/rm $tmpDens $tmpPeaks", $verbose);
#}
#my $thisLabel = "nucleo_" . $k;
#my $bwLine = createBigWigLine($thisLabel, $ENV{'studyName'}, $densOut, $ENV{'url'}, 0, 1);
#ourWriteToFile(">>${finalTrackDescriptionFile}", "${bwLine}\n");
#my $bbLine = createPeakBigBedLine("nucleo", $k, $ENV{'studyName'}, $peaksOut, $ENV{'url'});
#ourWriteToFile(">>${finalTrackDescriptionFile}", "${bbLine}\n");
#}
